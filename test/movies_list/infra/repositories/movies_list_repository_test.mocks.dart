// Mocks generated by Mockito 5.1.0 from annotations
// in movies_list_app/test/movies_list/infra/repositories/movies_list_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies_list_app/core/domain/error/failures.dart' as _i5;
import 'package:movies_list_app/core/infra/network_info.dart' as _i9;
import 'package:movies_list_app/features/movies_list/domain/entities/movie_entity.dart'
    as _i6;
import 'package:movies_list_app/features/movies_list/domain/repositories/movies_list_repository.dart'
    as _i3;
import 'package:movies_list_app/features/movies_list/infra/datasources/movies_local_datasource.dart'
    as _i8;
import 'package:movies_list_app/features/movies_list/infra/datasources/movies_remote_datasource.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [MoviesListRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesListRepository extends _i1.Mock
    implements _i3.MoviesListRepository {
  MockMoviesListRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.MovieEntity>> getMovies() =>
      (super.noSuchMethod(Invocation.method(#getMovies, []),
          returnValue: Future<_i2.Either<_i5.Failure, _i6.MovieEntity>>.value(
              _FakeEither_0<_i5.Failure, _i6.MovieEntity>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i6.MovieEntity>>);
}

/// A class which mocks [MoviesRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesRemoteDatasource extends _i1.Mock
    implements _i7.MoviesRemoteDatasource {
  MockMoviesRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<dynamic, dynamic>> getMovies() =>
      (super.noSuchMethod(Invocation.method(#getMovies, []),
              returnValue:
                  Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}))
          as _i4.Future<Map<dynamic, dynamic>>);
}

/// A class which mocks [MoviesLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesLocalDatasource extends _i1.Mock
    implements _i8.MoviesLocalDatasource {
  MockMoviesLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<dynamic, dynamic>> getMovies() =>
      (super.noSuchMethod(Invocation.method(#getMovies, []),
              returnValue:
                  Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}))
          as _i4.Future<Map<dynamic, dynamic>>);
  @override
  _i4.Future<void> saveMovies(Map<dynamic, dynamic>? jsonModel) =>
      (super.noSuchMethod(Invocation.method(#saveMovies, [jsonModel]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i9.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
